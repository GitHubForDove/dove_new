<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
       http://www.springframework.org/schema/beans 
       http://www.springframework.org/schema/beans/spring-beans-3.1.xsd 
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context-3.1.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx-3.1.xsd">

	<!-- 配置缓存 -->
	<bean id="cacheManagerFactory"
		class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
		<property name="configLocation" value="classpath:conf/ehcache.xml" />
	</bean>
	<!-- 普通缓存 -->  
    <bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager">    
        <property name="cacheManager"  ref="cacheManagerFactory"/>    
    </bean>
	<!-- shiro缓存 -->
	<bean id="shiroCacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
		<property name="cacheManager" ref="cacheManagerFactory" />
	</bean>

	<!-- 配置权限管理 -->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"></bean>
	<bean id="jdbcRealm" class="com.sanxia.dove.platform.core.shiro.UserRealm"></bean>
	
	<!--当我们把securityManager的sessionMode参数设置为native时，那么shrio就将用户的基本认证信息保存到缺省名称为shiro-activeSessionCache 的Cache中
	org.apache.shiro.web.mgt.DefaultWebSecurityManager 在sessionMode参数设置为native时，缺省使用的是DefaultWebSessionManager来管理Session，该管理类缺省使用的是使用MemorySessionDAO基于内存来保存和操作用户基本认证信息。如果系统内的用户数特别多，我们需要使用CacheSessionDao来基于Cache进行操作，因此，这里需要显示配置一个sessionManager（org.apache.shiro.web.session.mgt.DefaultWebSessionManager）,并配置该sessionManager的sessionDao为CacheSessionDao（org.apache.shiro.session.mgt.eis.CachingSessionDAO，需用其实现类org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO）。配置CacheSessionDao时，我们可以指定属性activeSessionsCacheName的名称来替换掉缺省名 shiro-activeSessionCache。
	我们再把该sessionManager配置给DefaultWebSecurityManager就可以了。	-->
	<!-- Shiro安全管理器 -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="realm" ref="jdbcRealm"></property>
		<property name="sessionMode" value="native" />
		<property name="sessionManager" ref="sessionManager" />
		<property name="cacheManager" ref="shiroCacheManager"></property>
	</bean>
	<!--  DefaultWebSessionManager：用于Web环境的实现，可以替代ServletContainerSessionManager，自己维护着会话，直接废弃了Servlet容器的会话管理。 -->
	<bean id="sessionManager"
		class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
		<property name="sessionDAO" ref="sessionDAO" />
		<property name="sessionIdCookie" ref="sessionIdCookie" />
	</bean>
	<!-- sessionIdCookie.httpOnly：如果设置为true，则客户端不会暴露给客户端脚本代码，使用HttpOnly cookie有助于减少某些类型的跨站点脚本攻击；此特性需要实现了Servlet 2.5 MR6及以上版本的规范的Servlet容器支持； 
	sessionIdCookie.name：设置Cookie名字，默认为JSESSIONID；
-->


	<bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
		<property name="httpOnly" value="true" />
		<property name="name" value="platformShiroId" />
	</bean>
	<bean id="sessionDAO" class="org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO">
		<property name="activeSessionsCacheName" value="shiro-activeSessionCache" />
		<property name="cacheManager" ref="shiroCacheManager"></property>
	</bean>
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<!-- Shiro的核心安全接口，这个属性是必须的 -->
		<property name="securityManager" ref="securityManager"></property>
		<property name="loginUrl" value="/toLoginPage"></property>
		<!-- 登录成功后要跳转的连接(本例中此属性用不到，因为登录成功后的处理逻辑在LoginController里硬编码) -->
		<!-- <property name="successUrl" value="/" ></property> -->
		<!-- 用户访问未对其授权的资源时，所显示的连接 -->
		<property name="unauthorizedUrl" value="/unauthorizedUrl"></property>

		<!-- anon:例子/admins/**=anon 没有参数，表示可以匿名使用。
			authc:例如/admins/user/**=authc表示需要认证(登录)才能使用，FormAuthenticationFilter是表单认证，没有参数 
			perms：例子/admins/user/**=perms[user:add:*],参数可以写多个，多个时必须加上引号，并且参数之间用逗号分割，例如/admins/user/**=perms["user:add:*,user:modify:*"]，当有多个参数时必须每个参数都通过才通过，想当于isPermitedAll()方法。
		user:例如/admins/user/**=user没有参数表示必须存在用户,  身份认证通过或通过记住我认证通过的可以访问，当登入操作时不做检查
		-->
		<property name="filterChainDefinitions">
			<value>
				/logout=logout
				/admin/upload/**=authc
				/admin/systemUser/updatePwd=authc
				/admin/systemUser/**=authc,perms["systemUser"]
				/admin/systemRole/**=authc,perms["systemRole"]
			</value>
		</property>
	</bean>
</beans>